package ca.on.senecac.prg556.common;

import java.io.IOException;
import java.util.Enumeration;
import java.util.Properties;

import javax.servlet.Filter;
import javax.servlet.FilterChain;
import javax.servlet.FilterConfig;
import javax.servlet.RequestDispatcher;
import javax.servlet.ServletException;
import javax.servlet.ServletRequest;
import javax.servlet.ServletResponse;
import javax.servlet.http.HttpServletRequest;

/**
 * Dispatches file requests with specific extensions to specific folders.
 *
 * @author 	Wayne Bryan
 * @version %I% %G%
 *
 */
public class FileFilter implements Filter
{
	private Properties extensions = new Properties();

	/**
	 * Default constructor.
	 */
	public FileFilter()
	{
		
	}

	/**
	 * @see Filter#destroy()
	 */
	public void destroy()
	{
		
	}

	/**
	 * Any file request that ends with a specific extension is request dispatch forwarded to the same
	 * file but in a specified folder.  The extension and redirect folder pairs are specified a filter
	 * initialization parameters with the extension as the parameter name and the redirect folder as
	 * the parameter value.
	 * <p>
	 * Any requests for files with extensions for which there is no corresponding filter initialization
	 * parameter will simply continue along the filter chain to the next element.
	 */
	public void doFilter(ServletRequest req, ServletResponse resp, FilterChain chain) throws IOException, ServletException
	{
		HttpServletRequest request = (HttpServletRequest)req;

		// Get URI
		String uri = request.getRequestURI();

		// Get relocated URI
		uri = getRelocationPath(uri);

		// IMPORTANT: dispatch forward OR chain.doFilter, BUT NOT BOTH!!!
		if (uri != null)
		{
			RequestDispatcher disp = req.getRequestDispatcher(uri);
			disp.forward(req, resp);
		}
		else
		{
			chain.doFilter(req, resp);
		}
	}

	/**
	 * @see Filter#init(FilterConfig)
	 */
	public void init(FilterConfig fConfig) throws ServletException
	{
		// Populate extension and paths locally
		Enumeration<String> extNames = fConfig.getInitParameterNames();
		while (extNames.hasMoreElements())
		{
			String extName = extNames.nextElement();
			extensions.put(extName, fConfig.getInitParameter(extName));
		}
	}

	// Find relocation path (if any) with thread safety
	private synchronized String getRelocationPath(String uri)
	{
		if (uri.lastIndexOf(".") >= 0)
		{
			String extName = uri.substring(uri.lastIndexOf(".")+1).toLowerCase();
			String relocationPath = extensions.getProperty(extName);
			if (relocationPath != null)
			{
				return StringHelper.rightTrim(relocationPath, "/") + uri.substring(uri.lastIndexOf("/"));
			}
		}
		return null;
	}
}
